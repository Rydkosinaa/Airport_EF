// <auto-generated />
using System;
using Airport;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Airport.Migrations
{
    [DbContext(typeof(AirportContext))]
    [Migration("20230117235157_Mymigration3")]
    partial class Mymigration3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Airport.Models.Airline", b =>
                {
                    b.Property<string>("AirlineName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Plane_quont")
                        .HasColumnType("int");

                    b.Property<int>("Route_quont")
                        .HasColumnType("int");

                    b.HasKey("AirlineName");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("Airport.Models.Airport_", b =>
                {
                    b.Property<int>("Airport_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Airport_Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gates_quont")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Passengers_quont")
                        .HasColumnType("int");

                    b.Property<int>("Planes_quont")
                        .HasColumnType("int");

                    b.Property<int>("Workers_quont")
                        .HasColumnType("int");

                    b.HasKey("Airport_Id");

                    b.HasAlternateKey("Name", "Address");

                    b.ToTable("Airport_s");
                });

            modelBuilder.Entity("Airport.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<DateTime>("First")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gate_Number")
                        .HasColumnType("int");

                    b.Property<int>("Pasengers_Quont")
                        .HasColumnType("int");

                    b.Property<int>("Plane_Id")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<int>("Route_Id")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<DateTime>("Second")
                        .HasColumnType("datetime2");

                    b.HasKey("FlightId");

                    b.HasIndex("Plane_Id");

                    b.HasIndex("Route_Id");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Airport.Models.Passenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassengerId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PassengerId");

                    b.ToTable("Passengers", t =>
                        {
                            t.HasCheckConstraint("Age", "Age > 0 AND Age < 100");
                        });

                    b.HasData(
                        new
                        {
                            PassengerId = 1,
                            Age = 19,
                            Name = "Passenger1",
                            Surname = "Surname1"
                        },
                        new
                        {
                            PassengerId = 2,
                            Age = 20,
                            Name = "Passenger2",
                            Surname = "Surname2"
                        },
                        new
                        {
                            PassengerId = 3,
                            Age = 21,
                            Name = "Passenger3",
                            Surname = "Surname3"
                        });
                });

            modelBuilder.Entity("Airport.Models.Plane", b =>
                {
                    b.Property<int>("PlaneId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaneId"));

                    b.Property<string>("Airline_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Carrying_Capacity")
                        .HasColumnType("float");

                    b.Property<int>("Flight_Attendant_Quont")
                        .HasColumnType("int");

                    b.Property<int>("Flight_Id")
                        .HasColumnType("int");

                    b.Property<double>("Fuel_Consumption")
                        .HasColumnType("float");

                    b.Property<int>("Max_Plane_Quont")
                        .HasColumnType("int");

                    b.Property<int>("Pilote_Quont")
                        .HasColumnType("int");

                    b.HasKey("PlaneId");

                    b.HasIndex("Airline_Name");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("Airport.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"));

                    b.Property<string>("Airline_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Airport_ID_1")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<int>("Airport_ID_2")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.HasKey("RouteId");

                    b.HasIndex("Airline_name");

                    b.HasIndex("Airport_ID_1");

                    b.HasIndex("Airport_ID_2");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Airport.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("Baggage_Weight")
                        .HasColumnType("int");

                    b.Property<int>("Flight_Id")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<int>("Passenger_Doc_Id")
                        .HasColumnType("int");

                    b.Property<string>("Place_Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.HasIndex("Flight_Id");

                    b.HasIndex("Passenger_Doc_Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Airport.Models.Worker", b =>
                {
                    b.Property<int>("WorkerId")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AirportId")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("WorkerId", "Surname");

                    b.HasIndex("AirportId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Airport.Models.Flight", b =>
                {
                    b.HasOne("Airport.Models.Plane", "Plane")
                        .WithMany("Flight")
                        .HasForeignKey("Plane_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Airport.Models.Route", "Route")
                        .WithMany("Flights")
                        .HasForeignKey("Route_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plane");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Airport.Models.Plane", b =>
                {
                    b.HasOne("Airport.Models.Airline", "Airline")
                        .WithMany("Plane")
                        .HasForeignKey("Airline_Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Airline");
                });

            modelBuilder.Entity("Airport.Models.Route", b =>
                {
                    b.HasOne("Airport.Models.Airline", "Airline")
                        .WithMany("Route")
                        .HasForeignKey("Airline_name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Airport.Models.Airport_", "Airport_1")
                        .WithMany("Route1")
                        .HasForeignKey("Airport_ID_1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Airport.Models.Airport_", "Airport_2")
                        .WithMany("Route2")
                        .HasForeignKey("Airport_ID_2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("Airport_1");

                    b.Navigation("Airport_2");
                });

            modelBuilder.Entity("Airport.Models.Ticket", b =>
                {
                    b.HasOne("Airport.Models.Flight", "Flight")
                        .WithMany("Ticket")
                        .HasForeignKey("Flight_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Airport.Models.Passenger", "Passenger")
                        .WithMany("Tickets")
                        .HasForeignKey("Passenger_Doc_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("Airport.Models.Worker", b =>
                {
                    b.HasOne("Airport.Models.Airport_", "Airport")
                        .WithMany("Worker")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("Airport.Models.Airline", b =>
                {
                    b.Navigation("Plane");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Airport.Models.Airport_", b =>
                {
                    b.Navigation("Route1");

                    b.Navigation("Route2");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Airport.Models.Flight", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Airport.Models.Passenger", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Airport.Models.Plane", b =>
                {
                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Airport.Models.Route", b =>
                {
                    b.Navigation("Flights");
                });
#pragma warning restore 612, 618
        }
    }
}
